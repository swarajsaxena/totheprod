{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "rauno-sidebar",
  "type": "registry:block",
  "title": "Rauno Sidebar",
  "description": "A sidebar component with sections.",
  "files": [
    {
      "path": "components/ui/totheprod-ui/rauno-sidebar/rauno-sidebar.tsx",
      "content": "/**\n * @file RaunoSidebar Component\n * @description A minimal, animated sidebar component inspired by Rauno Freiberg's design aesthetic.\n *\n * Features:\n * - Smooth hover and active state animations\n * - Automatic divider rendering with configurable spacing\n * - Context-based configuration for consistent styling\n * - Composable components for flexible layouts\n *\n * @example\n * ```tsx\n * <RaunoSidebar>\n *   <RaunoSidebarSection>\n *     <RaunoSidebarSectionHeader>Dashboard</RaunoSidebarSectionHeader>\n *     <RaunoSidebarItem href=\"/overview\" isActive={true}>Overview</RaunoSidebarItem>\n *     <RaunoSidebarItem href=\"/analytics\">Analytics</RaunoSidebarItem>\n *   </RaunoSidebarSection>\n * </RaunoSidebar>\n * ```\n */\n\n'use client'\n\nimport { useState, createContext, useContext } from 'react'\nimport Link from 'next/link'\nimport { motion } from 'motion/react'\nimport { cn } from '@/lib/utils'\n\n/**\n * Context value for RaunoSidebar configuration\n */\ninterface RaunoSidebarContextValue {\n  /** Number of dividers to render between items within a section */\n  itemDividersLength: number\n  /** Number of dividers to render between sections */\n  sectionDividersLength: number\n}\n\n/**\n * Context for sharing divider configuration across sidebar components\n */\nconst RaunoSidebarContext = createContext<RaunoSidebarContextValue>({\n  itemDividersLength: 2,\n  sectionDividersLength: 4,\n})\n\n/**\n * Hook to access the RaunoSidebar context\n * @returns The current sidebar context value\n */\nconst useRaunoSidebarContext = () => useContext(RaunoSidebarContext)\n\n/**\n * Props for the RaunoSidebar component\n */\ninterface RaunoSidebarProps {\n  /** The sidebar content (sections, headers, items) */\n  children: React.ReactNode\n  /** Additional CSS classes to apply to the sidebar container */\n  className?: string\n  /** Number of dividers to render between items within a section (default: 2) */\n  itemDividersLength?: number\n  /** Number of dividers to render between sections (default: 4) */\n  sectionDividersLength?: number\n}\n\n/**\n * RaunoSidebar - Main container for the sidebar component\n *\n * A minimal, animated sidebar component inspired by Rauno's design.\n * Provides context for divider configuration and renders child components.\n *\n * @example\n * ```tsx\n * <RaunoSidebar itemDividersLength={2} sectionDividersLength={4}>\n *   <RaunoSidebarSection>\n *     <RaunoSidebarSectionHeader>Dashboard</RaunoSidebarSectionHeader>\n *     <RaunoSidebarItem href=\"/overview\">Overview</RaunoSidebarItem>\n *   </RaunoSidebarSection>\n * </RaunoSidebar>\n * ```\n */\nconst RaunoSidebar = ({\n  children,\n  className,\n  itemDividersLength = 2,\n  sectionDividersLength = 4,\n}: RaunoSidebarProps) => {\n  return (\n    <RaunoSidebarContext.Provider value={{ itemDividersLength, sectionDividersLength }}>\n      <div className={cn('flex flex-col min-w-max w-full p-4', className)}>\n        <div className=\"flex flex-col w-max\">{children}</div>\n      </div>\n    </RaunoSidebarContext.Provider>\n  )\n}\n\n/**\n * Props for the RaunoSidebarSectionDivider component\n */\ninterface RaunoSidebarSectionDividerProps {\n  /** Additional CSS classes to apply to the divider */\n  className?: string\n}\n\n/**\n * RaunoSidebarSectionDivider - Visual divider for spacing\n *\n * A subtle horizontal line used for spacing between items and sections.\n * Automatically rendered by headers, items, and sections based on context.\n */\nconst RaunoSidebarSectionDivider = ({ className }: RaunoSidebarSectionDividerProps) => {\n  return (\n    <div className={cn('h-2 flex items-center', className)}>\n      <div className=\"w-8 bg-muted-foreground/50 h-px\" />\n    </div>\n  )\n}\n\n/**\n * Props for the RaunoSidebarSection component\n */\ninterface RaunoSidebarSectionProps {\n  /** The section content (headers and items) */\n  children: React.ReactNode\n  /** Additional CSS classes to apply to the section container */\n  className?: string\n  /** Whether this is the last section (prevents rendering trailing dividers) */\n  isLast?: boolean\n}\n\n/**\n * RaunoSidebarSection - Container for a group of related sidebar items\n *\n * Groups related sidebar items together and automatically adds section dividers\n * after the section (unless it's the last one).\n */\nconst RaunoSidebarSection = ({ children, className, isLast = false }: RaunoSidebarSectionProps) => {\n  const { sectionDividersLength } = useRaunoSidebarContext()\n\n  return (\n    <>\n      <div className={cn('flex flex-col', className)}>{children}</div>\n      {!isLast &&\n        Array.from({ length: sectionDividersLength }).map((_, i) => (\n          <RaunoSidebarSectionDivider key={`section-divider-${i}`} />\n        ))}\n    </>\n  )\n}\n\n/**\n * Props for the RaunoSidebarSectionHeader component\n */\ninterface RaunoSidebarSectionHeaderProps {\n  /** The header text/content */\n  children: React.ReactNode\n  /** Additional CSS classes to apply to the header */\n  className?: string\n}\n\n/**\n * RaunoSidebarSectionHeader - Header for a sidebar section\n *\n * Displays a section title with a decorative line prefix.\n * Automatically adds item dividers below the header for spacing.\n */\nconst RaunoSidebarSectionHeader = ({ children, className }: RaunoSidebarSectionHeaderProps) => {\n  const { itemDividersLength } = useRaunoSidebarContext()\n\n  return (\n    <>\n      <h3\n        className={cn(\n          'text-sm font-medium text-foreground flex items-center gap-3 h-[10px]',\n          className\n        )}\n      >\n        <div className=\"w-8 bg-foreground/75 h-px\" />\n        <span>{children}</span>\n      </h3>\n      {Array.from({ length: itemDividersLength }).map((_, i) => (\n        <RaunoSidebarSectionDivider key={`header-divider-${i}`} />\n      ))}\n    </>\n  )\n}\n\n/**\n * Props for the RaunoSidebarItem component\n *\n * A clickable sidebar item with smooth hover and active state animations.\n */\ninterface RaunoSidebarItemProps extends React.HTMLAttributes<HTMLAnchorElement> {\n  /** The item label/text */\n  children: React.ReactNode\n  /** The link destination */\n  href: string\n  /** Whether this item is currently active/selected */\n  isActive?: boolean\n  /** Additional CSS classes to apply to the item container */\n  className?: string\n  /** Additional CSS classes to apply to the text/label */\n  textClassName?: string\n  /** Whether this is the last item (prevents rendering trailing dividers) */\n  isLast?: boolean\n}\n\n/**\n * RaunoSidebarItem - Interactive navigation item\n *\n * A clickable sidebar item with smooth hover and active state animations.\n * The decorative line expands and changes color on hover/active.\n * Automatically adds item dividers below (unless it's the last one).\n *\n * @example\n * ```tsx\n * <RaunoSidebarItem\n *   href=\"/dashboard\"\n *   isActive={currentPath === '/dashboard'}\n *   isLast={false}\n * >\n *   Dashboard\n * </RaunoSidebarItem>\n * ```\n */\nconst RaunoSidebarItem = ({\n  children,\n  isActive = false,\n  className,\n  textClassName,\n  isLast = false,\n  ...props\n}: RaunoSidebarItemProps) => {\n  const [isHovered, setIsHovered] = useState(false)\n  const { itemDividersLength } = useRaunoSidebarContext()\n\n  return (\n    <>\n      <motion.div\n        initial={{ paddingRight: 16 }}\n        animate={{ paddingRight: isHovered || isActive ? 0 : 16 }}\n        transition={{ duration: 0.3 }}\n        className={cn('flex items-center h-2', className)}\n      >\n        <Link\n          className=\"gap-3 h-6 flex items-center w-max z-1 relative\"\n          onMouseEnter={() => setIsHovered(true)}\n          onMouseLeave={() => setIsHovered(false)}\n          {...props}\n        >\n          <motion.div\n            className=\"h-px bg-muted-foreground/50\"\n            initial={{ width: 32 }}\n            animate={{\n              width: isHovered || isActive ? 48 : 32,\n              backgroundColor: isHovered || isActive ? 'var(--primary)' : undefined,\n            }}\n            transition={{ duration: 0.3 }}\n          />\n          <motion.span\n            className={cn('text-sm font-medium text-muted-foreground w-max', textClassName)}\n            animate={{\n              color: isHovered || isActive ? 'var(--primary)' : 'var(--muted-foreground)',\n            }}\n            transition={{ duration: 0.3 }}\n          >\n            {children}\n          </motion.span>\n        </Link>\n      </motion.div>\n      {!isLast &&\n        Array.from({ length: itemDividersLength }).map((_, i) => (\n          <RaunoSidebarSectionDivider key={`item-divider-${i}`} />\n        ))}\n    </>\n  )\n}\n\nexport {\n  RaunoSidebar,\n  RaunoSidebarSection,\n  RaunoSidebarSectionHeader,\n  RaunoSidebarSectionDivider,\n  RaunoSidebarItem,\n}\n",
      "type": "registry:component"
    }
  ]
}